import { useState } from 'react'
import { ChevronDown, Pencil, Sparkles, Trash2 } from 'lucide-react'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover'
import { Label } from '@/components/ui/label'
import { Button } from '@/components/ui/button'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip'
import { useLiveQuery, eq } from '@tanstack/react-db'
import type { TableCollections, Column } from '@/lib/ai-table/collections'
import { useAppForm } from '@/hooks/use-app-form'
import { toast } from 'sonner'

type ColumnHeaderPopoverProps = {
  column: Column
  collections: TableCollections
}

export function ColumnHeaderPopover({
  column,
  collections,
}: ColumnHeaderPopoverProps) {
  const [isOpen, setIsOpen] = useState(false)

  // Check if this is the last manual column to disable type change
  const { data: manualColumns = [] } = useLiveQuery((q) =>
    q
      .from({ col: collections.columns })
      .where(({ col }) => eq(col.type, 'manual')),
  )

  // Get all columns to check if this is the last one
  const { data: allColumns = [] } = useLiveQuery((q) =>
    q.from({ col: collections.columns }),
  )

  const isLastManualColumn =
    column.type === 'manual' && manualColumns.length <= 1
  const isLastColumn = allColumns.length <= 1

  const form = useAppForm({
    defaultValues: {
      name: column.name,
      type: (column.type || 'ai') as 'manual' | 'ai',
      description: column.description || '',
      aiPrompt: (column.config as { aiPrompt?: string })?.aiPrompt || '',
    },
    onSubmit: async ({ value }) => {
      console.log('value', value)
      collections.columns.update(column.id, (draft) => {
        draft.name = value.name
        draft.type = value.type
        draft.description = value.description
        draft.config = {
          aiPrompt: value.aiPrompt,
        }
      })
      setIsOpen(false)
    },
  })

  const handleCancel = () => {
    form.reset()
    setIsOpen(false)
  }

  const handleDelete = () => {
    if (isLastColumn) {
      toast.error('Cannot delete the last column')
      return
    }

    if (isLastManualColumn) {
      toast.error('Cannot delete the last manual column')
      return
    }

    collections.columns.delete(column.id)
    setIsOpen(false)
    toast.success('Column deleted')
  }

  return (
    <div className="flex w-full items-center justify-between gap-2">
      <div className="flex items-center gap-2">
        <span>{column.name}</span>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <div className="inline-flex opacity-30">
                {column.type === 'manual' ? (
                  <Pencil className="h-3.5 w-3.5" />
                ) : (
                  <Sparkles className="h-3.5 w-3.5" />
                )}
              </div>
            </TooltipTrigger>
            <TooltipContent>
              {column.type === 'manual' ? 'Manual Column' : 'AI Column'}
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>
      <Popover open={isOpen} onOpenChange={setIsOpen}>
        <PopoverTrigger asChild>
          <Button variant="ghost" size="icon" className="h-6 w-6">
            <ChevronDown className="h-4 w-4" />
          </Button>
        </PopoverTrigger>
        <PopoverContent
          className="w-80"
          align="start"
          onOpenAutoFocus={(e) => e.preventDefault()}
        >
          <div className="grid gap-4">
            {/* Column Name */}
            <form.AppField
              name="name"
              validators={{
                onBlur: ({ value }) => {
                  if (!value || value.trim().length === 0) {
                    return 'Column name is required'
                  }
                  return undefined
                },
              }}
            >
              {(field) => (
                <field.TextField label="Name" placeholder="Column name" />
              )}
            </form.AppField>

            {/* Column Type */}
            <form.AppField name="type">
              {(field) => (
                <div>
                  {isLastManualColumn && (
                    <p className="text-xs text-muted-foreground mb-2">
                      Cannot change type of last manual column
                    </p>
                  )}
                  <field.RadioGroupField
                    label="Column Type"
                    disabled={isLastManualColumn}
                    options={[
                      {
                        value: 'manual',
                        label: 'Manual - User enters values manually',
                        disabled: isLastManualColumn,
                      },
                      {
                        value: 'ai',
                        label: 'AI - Values generated by AI prompt',
                      },
                    ]}
                  />
                </div>
              )}
            </form.AppField>

            {/* Description */}
            <form.AppField name="description">
              {(field) => <field.TextArea label="Description" rows={2} />}
            </form.AppField>

            {/* AI Action - Only show for AI columns */}
            <form.Subscribe selector={(state) => state.values.type}>
              {(type) =>
                type === 'ai' && (
                  <form.AppField name="aiPrompt">
                    {(field) => (
                      <div className="grid gap-2">
                        <div className="space-y-1">
                          <Label>AI Prompt</Label>
                          <p className="text-xs text-muted-foreground">
                            Define how AI should generate values for this column
                          </p>
                        </div>
                        <field.TextArea label="" rows={3} />
                      </div>
                    )}
                  </form.AppField>
                )
              }
            </form.Subscribe>

            {/* Action Buttons */}
            <div className="flex items-center justify-between gap-2">
              <Button
                variant="destructive"
                size="sm"
                onClick={handleDelete}
                disabled={isLastColumn || isLastManualColumn}
              >
                <Trash2 className="mr-2 h-4 w-4" />
                Delete
              </Button>
              <div className="flex gap-2">
                <Button variant="outline" size="sm" onClick={handleCancel}>
                  Cancel
                </Button>
                <form.AppForm>
                  <form.SubscribeButton
                    label="Save"
                    size="sm"
                    onClick={(e) => {
                      e.preventDefault()
                      form.handleSubmit()
                    }}
                  />
                </form.AppForm>
              </div>
            </div>
          </div>
        </PopoverContent>
      </Popover>
    </div>
  )
}
