/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiInngestRouteImport } from './routes/api/inngest'
import { Route as AuthedTableExampleRouteImport } from './routes/_authed/table-example'
import { Route as AuthedProfileRouteImport } from './routes/_authed/profile'
import { Route as AuthedNewChatRouteImport } from './routes/_authed/new-chat'
import { Route as AuthedAppRouteImport } from './routes/_authed/app'
import { Route as AuthedTablesIndexRouteImport } from './routes/_authed/tables/index'
import { Route as DemoFormAddressRouteImport } from './routes/demo/form.address'
import { Route as DemoApiTqTodosRouteImport } from './routes/demo/api.tq-todos'
import { Route as ApiRpcSplatRouteImport } from './routes/api/rpc.$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'
import { Route as ApiAuthedApiDbChatApiRouteImport } from './routes/api/_authed-api/db-chat-api'
import { Route as AuthedTablesTableIdRouteImport } from './routes/_authed/tables/$tableId'
import { Route as AuthedConversationsConversationIdRouteImport } from './routes/_authed/conversations.$conversationId'
import { Route as ApiAuthedApiChatConversationIdRouteImport } from './routes/api/_authed-api/chat.$conversationId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiInngestRoute = ApiInngestRouteImport.update({
  id: '/api/inngest',
  path: '/api/inngest',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedTableExampleRoute = AuthedTableExampleRouteImport.update({
  id: '/table-example',
  path: '/table-example',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedProfileRoute = AuthedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedNewChatRoute = AuthedNewChatRouteImport.update({
  id: '/new-chat',
  path: '/new-chat',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedAppRoute = AuthedAppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedTablesIndexRoute = AuthedTablesIndexRouteImport.update({
  id: '/tables/',
  path: '/tables/',
  getParentRoute: () => AuthedRoute,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiTqTodosRoute = DemoApiTqTodosRouteImport.update({
  id: '/demo/api/tq-todos',
  path: '/demo/api/tq-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthedApiDbChatApiRoute = ApiAuthedApiDbChatApiRouteImport.update({
  id: '/api/_authed-api/db-chat-api',
  path: '/api/db-chat-api',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedTablesTableIdRoute = AuthedTablesTableIdRouteImport.update({
  id: '/tables/$tableId',
  path: '/tables/$tableId',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedConversationsConversationIdRoute =
  AuthedConversationsConversationIdRouteImport.update({
    id: '/conversations/$conversationId',
    path: '/conversations/$conversationId',
    getParentRoute: () => AuthedRoute,
  } as any)
const ApiAuthedApiChatConversationIdRoute =
  ApiAuthedApiChatConversationIdRouteImport.update({
    id: '/api/_authed-api/chat/$conversationId',
    path: '/api/chat/$conversationId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/app': typeof AuthedAppRoute
  '/new-chat': typeof AuthedNewChatRoute
  '/profile': typeof AuthedProfileRoute
  '/table-example': typeof AuthedTableExampleRoute
  '/api/inngest': typeof ApiInngestRoute
  '/conversations/$conversationId': typeof AuthedConversationsConversationIdRoute
  '/tables/$tableId': typeof AuthedTablesTableIdRoute
  '/api/db-chat-api': typeof ApiAuthedApiDbChatApiRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/tables': typeof AuthedTablesIndexRoute
  '/api/chat/$conversationId': typeof ApiAuthedApiChatConversationIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/app': typeof AuthedAppRoute
  '/new-chat': typeof AuthedNewChatRoute
  '/profile': typeof AuthedProfileRoute
  '/table-example': typeof AuthedTableExampleRoute
  '/api/inngest': typeof ApiInngestRoute
  '/conversations/$conversationId': typeof AuthedConversationsConversationIdRoute
  '/tables/$tableId': typeof AuthedTablesTableIdRoute
  '/api/db-chat-api': typeof ApiAuthedApiDbChatApiRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/tables': typeof AuthedTablesIndexRoute
  '/api/chat/$conversationId': typeof ApiAuthedApiChatConversationIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authed/app': typeof AuthedAppRoute
  '/_authed/new-chat': typeof AuthedNewChatRoute
  '/_authed/profile': typeof AuthedProfileRoute
  '/_authed/table-example': typeof AuthedTableExampleRoute
  '/api/inngest': typeof ApiInngestRoute
  '/_authed/conversations/$conversationId': typeof AuthedConversationsConversationIdRoute
  '/_authed/tables/$tableId': typeof AuthedTablesTableIdRoute
  '/api/_authed-api/db-chat-api': typeof ApiAuthedApiDbChatApiRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/_authed/tables/': typeof AuthedTablesIndexRoute
  '/api/_authed-api/chat/$conversationId': typeof ApiAuthedApiChatConversationIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/app'
    | '/new-chat'
    | '/profile'
    | '/table-example'
    | '/api/inngest'
    | '/conversations/$conversationId'
    | '/tables/$tableId'
    | '/api/db-chat-api'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/tables'
    | '/api/chat/$conversationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/app'
    | '/new-chat'
    | '/profile'
    | '/table-example'
    | '/api/inngest'
    | '/conversations/$conversationId'
    | '/tables/$tableId'
    | '/api/db-chat-api'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/tables'
    | '/api/chat/$conversationId'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/_authed/app'
    | '/_authed/new-chat'
    | '/_authed/profile'
    | '/_authed/table-example'
    | '/api/inngest'
    | '/_authed/conversations/$conversationId'
    | '/_authed/tables/$tableId'
    | '/api/_authed-api/db-chat-api'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/_authed/tables/'
    | '/api/_authed-api/chat/$conversationId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  ApiInngestRoute: typeof ApiInngestRoute
  ApiAuthedApiDbChatApiRoute: typeof ApiAuthedApiDbChatApiRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiRpcSplatRoute: typeof ApiRpcSplatRoute
  DemoApiTqTodosRoute: typeof DemoApiTqTodosRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  ApiAuthedApiChatConversationIdRoute: typeof ApiAuthedApiChatConversationIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/inngest': {
      id: '/api/inngest'
      path: '/api/inngest'
      fullPath: '/api/inngest'
      preLoaderRoute: typeof ApiInngestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/table-example': {
      id: '/_authed/table-example'
      path: '/table-example'
      fullPath: '/table-example'
      preLoaderRoute: typeof AuthedTableExampleRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/profile': {
      id: '/_authed/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthedProfileRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/new-chat': {
      id: '/_authed/new-chat'
      path: '/new-chat'
      fullPath: '/new-chat'
      preLoaderRoute: typeof AuthedNewChatRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/app': {
      id: '/_authed/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AuthedAppRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/tables/': {
      id: '/_authed/tables/'
      path: '/tables'
      fullPath: '/tables'
      preLoaderRoute: typeof AuthedTablesIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/tq-todos': {
      id: '/demo/api/tq-todos'
      path: '/demo/api/tq-todos'
      fullPath: '/demo/api/tq-todos'
      preLoaderRoute: typeof DemoApiTqTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/_authed-api/db-chat-api': {
      id: '/api/_authed-api/db-chat-api'
      path: '/api/db-chat-api'
      fullPath: '/api/db-chat-api'
      preLoaderRoute: typeof ApiAuthedApiDbChatApiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/tables/$tableId': {
      id: '/_authed/tables/$tableId'
      path: '/tables/$tableId'
      fullPath: '/tables/$tableId'
      preLoaderRoute: typeof AuthedTablesTableIdRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/conversations/$conversationId': {
      id: '/_authed/conversations/$conversationId'
      path: '/conversations/$conversationId'
      fullPath: '/conversations/$conversationId'
      preLoaderRoute: typeof AuthedConversationsConversationIdRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/api/_authed-api/chat/$conversationId': {
      id: '/api/_authed-api/chat/$conversationId'
      path: '/api/chat/$conversationId'
      fullPath: '/api/chat/$conversationId'
      preLoaderRoute: typeof ApiAuthedApiChatConversationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthedRouteChildren {
  AuthedAppRoute: typeof AuthedAppRoute
  AuthedNewChatRoute: typeof AuthedNewChatRoute
  AuthedProfileRoute: typeof AuthedProfileRoute
  AuthedTableExampleRoute: typeof AuthedTableExampleRoute
  AuthedConversationsConversationIdRoute: typeof AuthedConversationsConversationIdRoute
  AuthedTablesTableIdRoute: typeof AuthedTablesTableIdRoute
  AuthedTablesIndexRoute: typeof AuthedTablesIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedAppRoute: AuthedAppRoute,
  AuthedNewChatRoute: AuthedNewChatRoute,
  AuthedProfileRoute: AuthedProfileRoute,
  AuthedTableExampleRoute: AuthedTableExampleRoute,
  AuthedConversationsConversationIdRoute:
    AuthedConversationsConversationIdRoute,
  AuthedTablesTableIdRoute: AuthedTablesTableIdRoute,
  AuthedTablesIndexRoute: AuthedTablesIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  ApiInngestRoute: ApiInngestRoute,
  ApiAuthedApiDbChatApiRoute: ApiAuthedApiDbChatApiRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiRpcSplatRoute: ApiRpcSplatRoute,
  DemoApiTqTodosRoute: DemoApiTqTodosRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  ApiAuthedApiChatConversationIdRoute: ApiAuthedApiChatConversationIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
